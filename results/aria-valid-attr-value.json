{
  "li_role=\"tab\"": "To ensure valid values for common ARIA attributes on an `li` element, follow these steps:\n\n1. Use a valid ID for the `aria-controls` attribute: The value of the `aria-controls` attribute should match the ID of the element that this `li` element controls. In this case, the value is \"mmid-cpf-overview\", which should be the ID of the element being controlled by this `li` element (e.g., a tab panel). Make sure the ID is unique within the document.\n\n2. Use a valid value for the `aria-selected` attribute: The `aria-selected` attribute indicates whether the `li` element is currently selected. It should have a value of either \"true\" or \"false\". In this case, the value is \"true\", which means the `li` element is currently selected.\n\n3. Use a valid value for the `role` attribute: The `role` attribute specifies the role of the `li` element in the context of the user interface. In this case, the role is \"tab\", which means the `li` element serves as a tab within a tablist. Ensure that the `role` attribute value is appropriate for the intended use of the element.\n\n4. Make sure the `li` element is part of a parent element with a `role` of \"tablist\": The `li` element should be a child of an element with a `role` attribute value of \"tablist\". This helps screen readers and other assistive technologies understand the structure and relationship between the `li` elements and their corresponding tab panels.\n\nExample:\n\n```html\n<ul role=\"tablist\">\n  <li aria-controls=\"mmid-cpf-overview\" aria-selected=\"true\" role=\"tab\">CPF Overview</li>\n  <li aria-controls=\"mmid-cpf-details\" aria-selected=\"false\" role=\"tab\">CPF Details</li>\n</ul>\n\n<div id=\"mmid-cpf-overview\" role=\"tabpanel\">\n  <!-- CPF Overview content -->\n</div>\n\n<div id=\"mmid-cpf-details\" role=\"tabpanel\" hidden>\n  <!-- CPF Details content -->\n</div>\n```\n\nBy following these steps, you can ensure valid values for common ARIA attributes on an `li` element and improve the accessibility of your web content.",
  "li_aria-controls_aria-selected_role": "To ensure valid values for common ARIA attributes, follow these steps:\n\n1. Use the correct element: Make sure you are using the appropriate HTML element for the role you want to assign. In this case, you are using a `<li>` element with a role of \"tab\". This is acceptable, but it's a better practice to use a `<button>` element for a tab role, as it provides better accessibility support.\n\n2. Assign the correct role: Ensure that the role you are assigning to the element is valid and appropriate. In this case, the role \"tab\" is correct for a tab element.\n\n3. Use the proper ARIA attributes: Make sure to use valid ARIA attributes for the assigned role. In this case, `aria-controls` and `aria-selected` are valid attributes for a tab role.\n\n4. Reference existing elements: The value of the `aria-controls` attribute should match the ID of the element that this tab controls. Ensure that there is an element with the ID \"mmid-cpf-overview\" on the page.\n\n5. Set appropriate attribute values: The `aria-selected` attribute should have a value of \"true\" or \"false\". In this case, \"true\" is an appropriate value as it indicates that the tab is currently selected.\n\n6. Validate your HTML: Use an HTML validation tool like the W3C Markup Validation Service to check your code for errors and ensure that it follows the appropriate standards.\n\nHere's a revised version of your code using a `<button>` element:\n\n```html\n<button aria-controls=\"mmid-cpf-overview\" aria-selected=\"true\" role=\"tab\">Tab label</button>\n```\n\nRemember to also include the element that this tab controls, with the matching ID:\n\n```html\n<div id=\"mmid-cpf-overview\" role=\"tabpanel\" aria-labelledby=\"mmid-cpf-overview-tab\">\n  <!-- Tab panel content -->\n</div>\n```",
  "div_aria-labelledby_role": "To ensure valid values for common ARIA attributes like `aria-labelledby` and `role`, follow these steps:\n\n1. Use a unique and descriptive ID for the `aria-labelledby` attribute.\n   - The ID should be unique within the page to avoid conflicts.\n   - The ID should be descriptive and meaningful to provide context for screen reader users.\n\nExample:\n```html\n<h2 id=\"tabpanel-heading-1\">Tab Panel 1</h2>\n<div aria-labelledby=\"tabpanel-heading-1\" role=\"tabpanel\">\n  <!-- Tab panel content -->\n</div>\n```\n\n2. Ensure the element referenced by `aria-labelledby` exists in the DOM.\n   - The element with the ID specified in `aria-labelledby` should be present in the DOM to provide an accessible name for the element with the `aria-labelledby` attribute.\n\n3. Use the correct value for the `role` attribute.\n   - In this case, the `role` attribute should have the value \"tabpanel\" to indicate that the element is a container for the content of a tab.\n\n4. Use appropriate semantic HTML elements and ARIA roles for the related tab elements.\n   - The tab list should have a `role=\"tablist\"` attribute.\n   - Each tab should have a `role=\"tab\"` attribute and a unique ID.\n   - Each tab should also have an `aria-controls` attribute with the ID of its associated tab panel.\n\nExample:\n```html\n<ul role=\"tablist\">\n  <li role=\"presentation\">\n    <button id=\"tab-1\" role=\"tab\" aria-controls=\"tabpanel-1\" aria-selected=\"true\">Tab 1</button>\n  </li>\n  <li role=\"presentation\">\n    <button id=\"tab-2\" role=\"tab\" aria-controls=\"tabpanel-2\">Tab 2</button>\n  </li>\n</ul>\n<div id=\"tabpanel-1\" aria-labelledby=\"tab-1\" role=\"tabpanel\">\n  <!-- Tab panel 1 content -->\n</div>\n<div id=\"tabpanel-2\" aria-labelledby=\"tab-2\" role=\"tabpanel\" hidden>\n  <!-- Tab panel 2 content -->\n</div>\n```\n\n5. Test with screen readers and accessibility tools.\n   - Use screen readers like NVDA, JAWS, or VoiceOver to test the accessibility of your ARIA attributes.\n   - Use accessibility tools like axe or Lighthouse to check for ARIA attribute errors and warnings.\n\nBy following these steps, you can ensure valid values for common ARIA attributes like `"
}
