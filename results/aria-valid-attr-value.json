{
  "li_role=\"tab\"": "To ensure valid values for common ARIA attributes, follow these guidelines:\n\n1. Use the correct ARIA attribute for the element: In this case, the ARIA attributes used are appropriate for a tab element. The `aria-controls` attribute indicates the element controlled by the tab, and the `aria-selected` attribute indicates whether the tab is currently selected.\n\n2. Use valid values for the ARIA attributes:\n\n   - For `aria-controls`, use a value that matches the ID of the element being controlled by the tab. In this example, the value \"mmid-cpf-overview\" should be the ID of the element that is displayed when this tab is selected.\n   \n   - For `aria-selected`, use either \"true\" or \"false\" as the value. In this example, the value \"true\" indicates that the tab is currently selected.\n\n3. Use the correct `role` attribute: In this case, the `role=\"tab\"` attribute is appropriate for a tab element.\n\n4. Ensure that the controlled element has the appropriate `role` attribute: The element controlled by the tab (with the ID \"mmid-cpf-overview\") should have the `role=\"tabpanel\"` attribute.\n\n5. Ensure proper keyboard navigation: Make sure that the tab element is focusable and can be navigated using the keyboard (e.g., by using the Tab key or arrow keys).\n\nHere's an example of a valid `li` element with ARIA attributes:\n\n```html\n<li aria-controls=\"mmid-cpf-overview\" aria-selected=\"true\" role=\"tab\" tabindex=\"0\">Tab Label</li>\n```\n\nAnd the corresponding `tabpanel` element:\n\n```html\n<div id=\"mmid-cpf-overview\" role=\"tabpanel\">Tab content goes here</div>\n```\n\nBy following these guidelines, you can ensure valid values for common ARIA attributes and create accessible web content.",
  "div_role=\"tabpanel\"": "To ensure valid values for common ARIA attributes, follow these guidelines:\n\n1. Use the correct attribute: Make sure you are using the appropriate ARIA attribute for the element. In this case, `aria-labelledby` and `role` are correct for a `div` with a \"tabpanel\" role.\n\n2. Provide a unique ID: The value of the `aria-labelledby` attribute should be a unique ID that corresponds to the element that labels the tab panel. This element should have an `id` attribute with the same value. For example:\n\n```html\n<div id=\"tabpanel1\" aria-labelledby=\"tab1\" role=\"tabpanel\">\n  <!-- Tab panel content -->\n</div>\n```\n\n3. Associate the label: Ensure that the element with the ID specified in the `aria-labelledby` attribute is a valid label for the tab panel, typically a tab with a `role` of \"tab\". For example:\n\n```html\n<button id=\"tab1\" role=\"tab\" aria-controls=\"tabpanel1\">Tab 1</button>\n```\n\n4. Use the `aria-controls` attribute: To establish a relationship between the tab and the tab panel, use the `aria-controls` attribute on the tab element. The value of this attribute should match the ID of the tab panel.\n\n5. Set the `aria-selected` attribute: On the tab element, use the `aria-selected` attribute to indicate whether the tab is currently selected. Set it to \"true\" for the active tab and \"false\" for the inactive tabs.\n\n6. Manage visibility: Ensure that only the active tab panel is visible, while others are hidden using CSS or JavaScript. You can use the `aria-hidden` attribute to indicate the visibility state of the tab panels as well.\n\nHere's a complete example:\n\n```html\n<button id=\"tab1\" role=\"tab\" aria-controls=\"tabpanel1\" aria-selected=\"true\">Tab 1</button>\n<button id=\"tab2\" role=\"tab\" aria-controls=\"tabpanel2\" aria-selected=\"false\">Tab 2</button>\n\n<div id=\"tabpanel1\" aria-labelledby=\"tab1\" role=\"tabpanel\" aria-hidden=\"false\">\n  <!-- Tab panel 1 content -->\n</div>\n\n<div id=\"tabpanel2\" aria-labelledby=\"tab2\" role=\"tabpanel\" aria-hidden=\"true\" style=\"display:none;\">\n  <!-- Tab panel 2 content -->\n</div>\n```\n\nBy following these guidelines, you can ensure valid values for common ARIA attributes and create accessible tab panels."
}
