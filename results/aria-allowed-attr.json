{
  "span_aria-label": "To ensure ARIA attributes are allowed for an element's role, follow these steps:\n\n1. Identify the element's role: First, determine the role of the element you are working with. In this case, the element is a `<span>`.\n\n2. Check ARIA specification: Refer to the WAI-ARIA specification (https://www.w3.org/TR/wai-aria-1.1/#roles) to find the list of roles and their supported states and properties. Since `<span>` doesn't have a specific role by default, it falls under the generic \"no role\" category.\n\n3. Verify the ARIA attribute: Check if the ARIA attribute you want to use (in this case, `aria-label`) is allowed for the element's role. For elements with no specific role, most global ARIA attributes are allowed, including `aria-label`.\n\n4. Implement the ARIA attribute: If the ARIA attribute is allowed for the element's role, add it to the element's HTML tag. In this case, you can add `aria-label` to the `<span>` element like this: `<span aria-label=\"...\"></span>`.\n\n5. Test for accessibility: Use accessibility testing tools, like aXe or Lighthouse, to ensure that the ARIA attribute is implemented correctly and improves the element's accessibility.\n\nNote: If the element's role doesn't support the ARIA attribute you want to use, consider changing the element's role or using a different ARIA attribute that is allowed for the role. Always refer to the WAI-ARIA specification for guidance on roles and their supported states and properties.",
  "div_aria-label": "To ensure ARIA attributes are allowed for an element's role, follow these steps:\n\n1. Identify the element's role: In the given example, the element is a `<div>`. By default, a `<div>` does not have a specific role assigned to it. However, you may assign a role to the `<div>` by adding a `role` attribute, such as `role=\"button\"` or `role=\"navigation\"`.\n\n2. Check the ARIA specification: Refer to the WAI-ARIA Authoring Practices or the WAI-ARIA specification to find out which ARIA attributes are allowed for the specific role you have assigned to the element. You can find the WAI-ARIA Authoring Practices at https://www.w3.org/TR/wai-aria-practices-1.1/ and the WAI-ARIA specification at https://www.w3.org/TR/wai-aria-1.1/.\n\n3. Verify the ARIA attribute: In the given example, the ARIA attribute is `aria-label`. Check the ARIA specification to see if `aria-label` is allowed for the role you have assigned to the `<div>` element. If it is allowed, then you can use the `aria-label` attribute with the element. If not, you should either remove the `aria-label` attribute or assign a different role to the element that supports the use of `aria-label`.\n\n4. Test with assistive technologies: To ensure the ARIA attribute is working correctly and providing the intended accessibility support, test your implementation with various assistive technologies, such as screen readers and keyboard navigation tools. This will help you identify any issues with the ARIA attribute or the element's role and make any necessary adjustments.\n\nBy following these steps, you can ensure that the ARIA attributes you use are allowed for an element's role and provide the intended accessibility support.",
  "a_aria-label": "To ensure ARIA attributes are allowed for an element's role, follow these steps:\n\n1. Identify the element's role: In this case, the element is an anchor `<a>` tag, which has an implicit role of \"link\".\n\n2. Check the ARIA specification: Consult the WAI-ARIA specification (https://www.w3.org/TR/wai-aria-1.1/#roles) to see if the attribute you want to use is allowed for the element's role. In this case, we want to use `aria-label` for a \"link\" role.\n\n3. Verify the attribute is allowed: Look for the \"link\" role in the specification and check the \"Allowed ARIA attributes\" section. You'll find that `aria-label` is listed as an allowed attribute for the \"link\" role.\n\n4. Apply the attribute correctly: Now that you've confirmed that `aria-label` is allowed for the \"link\" role, you can apply it to the `<a>` element as follows:\n\n```html\n<a href=\"example.com\" aria-label=\"Example website\">Visit example.com</a>\n```\n\nBy following these steps, you can ensure that you're using ARIA attributes correctly and in accordance with the WAI-ARIA specification.",
  "div_aria-expanded": "To ensure ARIA attributes are allowed for an element's role, you should follow these steps:\n\n1. Identify the element's role: In this case, the element is a `div`. By default, a `div` element doesn't have a specific role in the accessibility tree. You need to assign an appropriate role to the `div` element using the `role` attribute.\n\n2. Check ARIA attribute compatibility: Look up the ARIA attribute you want to use (in this case, `aria-expanded`) and check which roles are allowed to use it. You can find this information in the ARIA documentation or by searching for the attribute in the ARIA in HTML guide.\n\n3. Assign an appropriate role to the element: Based on the compatibility information, assign a role to the `div` element that supports the `aria-expanded` attribute. For example, roles like `button`, `combobox`, `treeitem`, and others can use the `aria-expanded` attribute.\n\n4. Add the role and ARIA attribute to the element: Update your HTML code to include the role and ARIA attribute. For example, if you choose the `button` role, your code should look like this:\n\n```html\n<div role=\"button\" aria-expanded=\"false\">...</div>\n```\n\n5. Test your implementation: Use accessibility testing tools and/or screen readers to ensure that the ARIA attribute is correctly applied and works as expected."
}
