{
  "span_aria-label": "To ensure ARIA attributes are allowed for an element's role, follow these steps:\n\n1. Identify the element's role: Look at the element's tag and any role attribute it might have. In the example, the element is a `<span>` with no explicit role attribute, so its default role is \"generic\" or \"text\".\n\n2. Check the ARIA specification for allowed attributes: Consult the WAI-ARIA specification to find the list of supported ARIA attributes for the identified role. You can find the specification at https://www.w3.org/TR/wai-aria-1.1/#usage_intro.\n\n3. Verify if the ARIA attribute is allowed for the role: Look for the ARIA attribute in the list of supported attributes for the identified role. In this case, since the role is \"generic\" or \"text\", there is no specific list of allowed ARIA attributes. However, the `aria-label` attribute is a global attribute, which means it can be used on any element regardless of its role.\n\n4. Apply the ARIA attribute correctly: If the ARIA attribute is allowed for the element's role, ensure that it is used correctly according to the specification. For the `aria-label` attribute, it should provide a short, descriptive label for the element that can be read by screen readers.\n\nIn summary, the `<span aria-label=\"...\"></span>` example is allowed because the `aria-label` attribute is a global attribute and can be used on any element, including a `<span>` with a generic role.",
  "a_aria-label": "To ensure ARIA attributes are allowed for an element's role, follow these steps:\n\n1. Identify the element's role: In this case, the element is an anchor tag `<a>`, which has an implicit role of \"link\" in most cases.\n\n2. Refer to the WAI-ARIA specification: Check the W3C Web Accessibility Initiative - Accessible Rich Internet Applications (WAI-ARIA) specification for the allowed ARIA attributes for the identified role. You can find the specification here: https://www.w3.org/TR/wai-aria-1.1/#roles\n\n3. Find the appropriate role in the specification: In this case, search for the \"link\" role in the WAI-ARIA specification. You can find it here: https://www.w3.org/TR/wai-aria-1.1/#link\n\n4. Check the allowed ARIA attributes: Under the \"link\" role, you will find a section called \"Supported States and Properties\". This section lists all the ARIA attributes that are allowed for the \"link\" role.\n\n5. Verify if the attribute is allowed: In this case, check if `aria-label` is listed as a supported attribute for the \"link\" role. If it is listed, it means the attribute is allowed for the element's role.\n\nIn this example, `aria-label` is allowed for the \"link\" role, so the code `<a aria-label=\"...\"></a>` is valid and ensures that the ARIA attribute is allowed for the element's role.",
  "div_aria-expanded": "To ensure ARIA attributes are allowed for an element's role, follow these steps:\n\n1. Determine the role of the element: In this case, the element is a `div` without an explicit role. By default, a `div` has no specific role. If you want the `div` to have a specific role, you should add the `role` attribute, e.g., `role=\"button\"`.\n\n2. Check the ARIA attribute compatibility: Look up the ARIA attribute you want to add (`aria-expanded` in this case) in the ARIA specification or a reference guide, and see which roles it is allowed for. The `aria-expanded` attribute is used for elements that can be expanded or collapsed, like buttons or tree items.\n\n3. Verify the attribute is allowed for the role: If the role of the element is among the allowed roles for the ARIA attribute, you can add the attribute to the element. In this case, since our `div` has no specific role, it's better to give it a role that supports `aria-expanded`, like `button` or `treeitem`.\n\nHere's an example of how to correctly use the `aria-expanded` attribute with a `div`:\n\n```html\n<div role=\"button\" aria-expanded=\"false\" tabindex=\"0\">Expandable Button</div>\n```\n\nBy giving the `div` a role of `button`, we ensure that the `aria-expanded` attribute is allowed for this element.",
  "div_aria-label": "To ensure ARIA attributes are allowed for an element's role, follow these steps:\n\n1. Identify the element's role: In this case, the element is a `div`.\n\n2. Check the default role of the element: By default, a `div` element has no specific role assigned to it. Therefore, you may need to specify a role for the `div` if you want to use ARIA attributes.\n\n3. Choose an appropriate role: Depending on the purpose of the `div`, select a suitable role for it. For example, if the `div` is acting as a button, you can assign the role \"button\" to it.\n\n4. Add the role attribute to the element: Add the chosen role to the `div` element, like this: `<div role=\"button\" aria-label=\"...\"></div>`.\n\n5. Verify the ARIA attribute is allowed for the chosen role: Check the ARIA specification to ensure that the `aria-label` attribute is allowed for the chosen role. For example, the \"button\" role supports the `aria-label` attribute, so it is allowed in this case.\n\n6. Test with assistive technologies: Use screen readers or other assistive technologies to ensure that the ARIA attribute is working as expected and providing the necessary information to users.\n\nBy following these steps, you can ensure that ARIA attributes are allowed for an element's role and provide a better user experience for people using assistive technologies.",
  "a_aria-label_span_span": "To ensure ARIA attributes are allowed for an element's role, follow these steps:\n\n1. Identify the element's role: In this case, the element is an anchor tag `<a>`, which has an implicit role of \"link\".\n\n2. Check the ARIA specification: Consult the WAI-ARIA Authoring Practices or the ARIA in HTML specification to find the list of allowed ARIA attributes for the element's role.\n\n3. Verify the attribute: In this example, we are using the `aria-label` attribute. According to the ARIA specification, the `aria-label` attribute is allowed for the \"link\" role.\n\n4. Implement the attribute correctly: Ensure that the ARIA attribute is implemented correctly in the HTML code. In this case, the `aria-label` attribute should have a descriptive value that explains the purpose of the link.\n\nHere's an example of how to use the `aria-label` attribute with the anchor tag:\n\n```html\n<a href=\"https://example.com\" aria-label=\"Visit Example Website\">\n  <span>Click here</span>\n  <span>to visit</span>\n</a>\n```\n\nIn this example, the `aria-label` attribute provides a clear and descriptive label for the link, which will be announced by screen readers for better accessibility."
}
